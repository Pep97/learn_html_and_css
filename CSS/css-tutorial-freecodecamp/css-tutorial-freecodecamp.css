/* once you write "body" here in reality it reads "body" on the HTML file */

/* You need to add "";"" after every line otherwise it will stick all together */

/* "body" is the selector -> it helps you to select what you want to style. "background-color: green;" is the declaretion. 

Example:

body {
  background-color: green;

}

with " # " you can select the ID from your HTML and modify just that line. 

Example:

#welcome {
  background-color: green;

}

When you see "." followed by something else, it means we are selecting by its class.

Example:

.heading {
  color: blue;
}

you can also specify more -> h1.heading

-- With the "*" it means that you're effecting every single element on the page.

example

*{
  color: purple;
}

---------------

You can color specific elements 

h1, p{
  color: green;
}

-------------------

#background color

body{
  background-color: lightblue;
  opacity: 0.9;
}

------------------------

# add background image

body{
  background-image: 
  url();

  background-position: left top;

}

-------------------------- 

# margins -> used to create space betwen elements

you can do it with "px" or with "%" with the ladder it calculate the percentage of the size of the screen.

EXAMPLE

p {
  margin-left: 50%;
  margin-top: 20%;
}

If you write the code in this way 

p {
  margin: 50px 50px 50 px 50px;
}

it means -> 50px (top margin) 50px (right margin) 50 px (left margin) 50px (bottom margin)

------------- 

# Border style 

the code can be: dotted, double, dashed, solid, groove, ridge, inset, outset, inset, none, hidden

Example:

p {
  border-style: dotted;
}

you can modify further with these lines:

border-width: 10px;
border-color: purple blue green yellow;
border-radius: 10px;


or you can modify directly one side ->  

border-left: 10px dashed purple

--------------------------

# Paddle

used to create space between the content and the border

padding-top: 40px;
padding-left: 40px;
padding-bottom: 40px;

--------------------------

# Height & Width

it calculates the size of the element, you can say to it how big or small it is and the size of it.

height: 90px;
width: 90px;


You can also use percentages (instead of " px ") -> it calculates the percentage of the screen.


max-widht - it limits the width of the element --> define a maximum for an element and it will not exceed that size.


--------------------------

# Outline

it creates a border around the element, to make the element stand-out.

utline-style: dashed;
outline-offset: 10px; -> it says that you want to add 10px of space between the border and the content.

--------------------------

# Text style

text-align: center; -> it aligns the text to the cente, you can also do the right and by default is to the left.

text-align: justify -> it aligns the text to the justify, it will add space between the text and the border.

text-align-last: center; -> it aligns the last line of the text to the center. if you have text of multple lines, it will align the last line to the center.

text-decoration: -> it allows you decorate the text. you can use it with: underline, overline, underline, line-through, none.

None is used with links because by default a link has an underline line that you don't want and you can remove it using none.

text-transform: -> it allows you to transform the text. you can use it with: uppercase, lowercase, capitalize.

text-indent: -> it allows you to add space

letter-spacing: -> it will separ the letters, you have define the distance.

-----------------------------

#Fonts

font-family: -> it allows you to change the font easly, search them online.

font-style:
font-weight: 
font-size:

-----------------------------

#Icons

go on HTML and write in the head (it allows to take the icon from a website)

<link rel="stylesheet"
href="https://fonts.googleapis.com/icon?family=Material+Icons">

Then write in body (this allows you select the icon you want) 

<i class="material-icons"> cloud</i>
<i class="material-icons"> computer</i>
<i class="material-icons"> setting</i>

-----------------------------

#Tables

Create the basic table data in HTML then customize in CSS 

table, th, td {
  border: 2px solid;
  width: 80%;
  border-collapse: collapse;

}

th {
  height: 50px;
}

td{
  text-align: left;
  padding: 10px;

}

tr:hover {
  background-color: blue;
} --> it allows you give a different color once you hover a specific row. it used for design.

-----------------------------

#Display

Display: -> it allows you to display the element or not. you can use it with: block, inline, inline-block, hidden, none.

none remove the element from the page, hidden just blank the element but it is still there.


-----------------------------

#Combinator / Selector

it allows you to select the element inside another element
in the case below "h1" is the selector and "p" is the combinator (what's going to be effected).
h1  b{
color: red;
}

you can modify further, and add "h1 > b", this will mean that only "b" that is in direct descendant of "h1" will be effected.

#general sibling selector

h1 ~ b -> it means that all "b" that are after "h1" is closed will be effected.

-----------------------------

# Attribute selectors

with "div [class]" you select every "div" that has a class. --> if you do need [class="test"] it will select just the specif class, so in this case "test"


*/


/* Dropdown button */

.dropdownbutton{
    background-color: blue;
    color: white;
    padding: 13px;
    font-size: 16px;
    border: none;
    cursor: pointer;
  }
  
  .dropdown-menu{
    display: none;
    position: absolute;
    background-color: lightblue;
    min-width: 150px;
  }
  
  .dropdown-menu a {
    color: black;
    passing: 11px 15px;
    text-decoration: none;
    display: block;
  }
  
  .dropdown-menu a:hover{
    background-color: white;
  }
  
  .dropdown:hover .dropdown-menu {
    display: block;
    
  }
  .dropdown:hover .dropdownbutton {
    color: greenyellow;
    background-color: grey;
  }
  
  
  /* Selector */
  
  h1  b{
  color: red;
  }
  
  /* table */
  
  table, th, td {
    border: 2px solid;
    width: 80%;
    border-collapse: collapse;
    
  }
  
  th {
    height: 50px;
  }
  
  td{
    text-align: left;
    padding: 10px;
    
  }
  
  tr:hover {
    background-color: blue;
  }
  
  
  /* toggle code */
  
  .theme-switch {
    --toggle-size: 30px;
    /* the size is adjusted using font-size,
       this is not transform scale,
       so you can choose any size */
    --container-width: 5.625em;
    --container-height: 2.5em;
    --container-radius: 6.25em;
    /* radius 0 - minecraft mode :) */
    --container-light-bg: #3D7EAE;
    --container-night-bg: #1D1F2C;
    --circle-container-diameter: 3.375em;
    --sun-moon-diameter: 2.125em;
    --sun-bg: #ECCA2F;
    --moon-bg: #C4C9D1;
    --spot-color: #959DB1;
    --circle-container-offset: calc((var(--circle-container-diameter) - var(--container-height)) / 2 * -1);
    --stars-color: #fff;
    --clouds-color: #F3FDFF;
    --back-clouds-color: #AACADF;
    --transition: .5s cubic-bezier(0, -0.02, 0.4, 1.25);
    --circle-transition: .3s cubic-bezier(0, -0.02, 0.35, 1.17);
  }
  
  .theme-switch, .theme-switch *, .theme-switch *::before, .theme-switch *::after {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-size: var(--toggle-size);
  }
  
  .theme-switch__container {
    width: var(--container-width);
    height: var(--container-height);
    background-color: var(--container-light-bg);
    border-radius: var(--container-radius);
    overflow: hidden;
    cursor: pointer;
    -webkit-box-shadow: 0em -0.062em 0.062em rgba(0, 0, 0, 0.25), 0em 0.062em 0.125em rgba(255, 255, 255, 0.94);
    box-shadow: 0em -0.062em 0.062em rgba(0, 0, 0, 0.25), 0em 0.062em 0.125em rgba(255, 255, 255, 0.94);
    -webkit-transition: var(--transition);
    -o-transition: var(--transition);
    transition: var(--transition);
    position: relative;
  }
  
  .theme-switch__container::before {
    content: "";
    position: absolute;
    z-index: 1;
    inset: 0;
    -webkit-box-shadow: 0em 0.05em 0.187em rgba(0, 0, 0, 0.25) inset, 0em 0.05em 0.187em rgba(0, 0, 0, 0.25) inset;
    box-shadow: 0em 0.05em 0.187em rgba(0, 0, 0, 0.25) inset, 0em 0.05em 0.187em rgba(0, 0, 0, 0.25) inset;
    border-radius: var(--container-radius)
  }
  
  .theme-switch__checkbox {
    display: none;
  }
  
  .theme-switch__circle-container {
    width: var(--circle-container-diameter);
    height: var(--circle-container-diameter);
    background-color: rgba(255, 255, 255, 0.1);
    position: absolute;
    left: var(--circle-container-offset);
    top: var(--circle-container-offset);
    border-radius: var(--container-radius);
    -webkit-box-shadow: inset 0 0 0 3.375em rgba(255, 255, 255, 0.1), inset 0 0 0 3.375em rgba(255, 255, 255, 0.1), 0 0 0 0.625em rgba(255, 255, 255, 0.1), 0 0 0 1.25em rgba(255, 255, 255, 0.1);
    box-shadow: inset 0 0 0 3.375em rgba(255, 255, 255, 0.1), inset 0 0 0 3.375em rgba(255, 255, 255, 0.1), 0 0 0 0.625em rgba(255, 255, 255, 0.1), 0 0 0 1.25em rgba(255, 255, 255, 0.1);
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-transition: var(--circle-transition);
    -o-transition: var(--circle-transition);
    transition: var(--circle-transition);
    pointer-events: none;
  }
  
  .theme-switch__sun-moon-container {
    pointer-events: auto;
    position: relative;
    z-index: 2;
    width: var(--sun-moon-diameter);
    height: var(--sun-moon-diameter);
    margin: auto;
    border-radius: var(--container-radius);
    background-color: var(--sun-bg);
    -webkit-box-shadow: 0.062em 0.062em 0.062em 0em rgba(254, 255, 239, 0.61) inset, 0em -0.062em 0.062em 0em #a1872a inset;
    box-shadow: 0.062em 0.062em 0.062em 0em rgba(254, 255, 239, 0.61) inset, 0em -0.062em 0.062em 0em #a1872a inset;
    -webkit-filter: drop-shadow(0.062em 0.125em 0.125em rgba(0, 0, 0, 0.25)) drop-shadow(0em 0.062em 0.125em rgba(0, 0, 0, 0.25));
    filter: drop-shadow(0.062em 0.125em 0.125em rgba(0, 0, 0, 0.25)) drop-shadow(0em 0.062em 0.125em rgba(0, 0, 0, 0.25));
    overflow: hidden;
    -webkit-transition: var(--transition);
    -o-transition: var(--transition);
    transition: var(--transition);
  }
  
  .theme-switch__moon {
    -webkit-transform: translateX(100%);
    -ms-transform: translateX(100%);
    transform: translateX(100%);
    width: 100%;
    height: 100%;
    background-color: var(--moon-bg);
    border-radius: inherit;
    -webkit-box-shadow: 0.062em 0.062em 0.062em 0em rgba(254, 255, 239, 0.61) inset, 0em -0.062em 0.062em 0em #969696 inset;
    box-shadow: 0.062em 0.062em 0.062em 0em rgba(254, 255, 239, 0.61) inset, 0em -0.062em 0.062em 0em #969696 inset;
    -webkit-transition: var(--transition);
    -o-transition: var(--transition);
    transition: var(--transition);
    position: relative;
  }
  
  .theme-switch__spot {
    position: absolute;
    top: 0.75em;
    left: 0.312em;
    width: 0.75em;
    height: 0.75em;
    border-radius: var(--container-radius);
    background-color: var(--spot-color);
    -webkit-box-shadow: 0em 0.0312em 0.062em rgba(0, 0, 0, 0.25) inset;
    box-shadow: 0em 0.0312em 0.062em rgba(0, 0, 0, 0.25) inset;
  }
  
  .theme-switch__spot:nth-of-type(2) {
    width: 0.375em;
    height: 0.375em;
    top: 0.937em;
    left: 1.375em;
  }
  
  .theme-switch__spot:nth-last-of-type(3) {
    width: 0.25em;
    height: 0.25em;
    top: 0.312em;
    left: 0.812em;
  }
  
  .theme-switch__clouds {
    width: 1.25em;
    height: 1.25em;
    background-color: var(--clouds-color);
    border-radius: var(--container-radius);
    position: absolute;
    bottom: -0.625em;
    left: 0.312em;
    -webkit-box-shadow: 0.937em 0.312em var(--clouds-color), -0.312em -0.312em var(--back-clouds-color), 1.437em 0.375em var(--clouds-color), 0.5em -0.125em var(--back-clouds-color), 2.187em 0 var(--clouds-color), 1.25em -0.062em var(--back-clouds-color), 2.937em 0.312em var(--clouds-color), 2em -0.312em var(--back-clouds-color), 3.625em -0.062em var(--clouds-color), 2.625em 0em var(--back-clouds-color), 4.5em -0.312em var(--clouds-color), 3.375em -0.437em var(--back-clouds-color), 4.625em -1.75em 0 0.437em var(--clouds-color), 4em -0.625em var(--back-clouds-color), 4.125em -2.125em 0 0.437em var(--back-clouds-color);
    box-shadow: 0.937em 0.312em var(--clouds-color), -0.312em -0.312em var(--back-clouds-color), 1.437em 0.375em var(--clouds-color), 0.5em -0.125em var(--back-clouds-color), 2.187em 0 var(--clouds-color), 1.25em -0.062em var(--back-clouds-color), 2.937em 0.312em var(--clouds-color), 2em -0.312em var(--back-clouds-color), 3.625em -0.062em var(--clouds-color), 2.625em 0em var(--back-clouds-color), 4.5em -0.312em var(--clouds-color), 3.375em -0.437em var(--back-clouds-color), 4.625em -1.75em 0 0.437em var(--clouds-color), 4em -0.625em var(--back-clouds-color), 4.125em -2.125em 0 0.437em var(--back-clouds-color);
    -webkit-transition: 0.5s cubic-bezier(0, -0.02, 0.4, 1.25);
    -o-transition: 0.5s cubic-bezier(0, -0.02, 0.4, 1.25);
    transition: 0.5s cubic-bezier(0, -0.02, 0.4, 1.25);
  }
  
  .theme-switch__stars-container {
    position: absolute;
    color: var(--stars-color);
    top: -100%;
    left: 0.312em;
    width: 2.75em;
    height: auto;
    -webkit-transition: var(--transition);
    -o-transition: var(--transition);
    transition: var(--transition);
  }
  
  /* actions */
  
  .theme-switch__checkbox:checked + .theme-switch__container {
    background-color: var(--container-night-bg);
  }
  
  .theme-switch__checkbox:checked + .theme-switch__container .theme-switch__circle-container {
    left: calc(100% - var(--circle-container-offset) - var(--circle-container-diameter));
  }
  
  .theme-switch__checkbox:checked + .theme-switch__container .theme-switch__circle-container:hover {
    left: calc(100% - var(--circle-container-offset) - var(--circle-container-diameter) - 0.187em)
  }
  
  .theme-switch__circle-container:hover {
    left: calc(var(--circle-container-offset) + 0.187em);
  }
  
  .theme-switch__checkbox:checked + .theme-switch__container .theme-switch__moon {
    -webkit-transform: translate(0);
    -ms-transform: translate(0);
    transform: translate(0);
  }
  
  .theme-switch__checkbox:checked + .theme-switch__container .theme-switch__clouds {
    bottom: -4.062em;
  }
  
  .theme-switch__checkbox:checked + .theme-switch__container .theme-switch__stars-container {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  
  /* Card title */
  
  .card-title {
    color: #262626;
    font-size: 1.5em;
    line-height: normal;
    font-weight: 700;
    margin-bottom: 0.5em;
  }
  
  .small-desc {
    font-size: 1em;
    font-weight: 400;
    line-height: 1.5em;
    color: #452c2c;
  }
  
  .small-desc {
    font-size: 1em;
  }
  
  .go-corner {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    width: 2em;
    height: 2em;
    overflow: hidden;
    top: 0;
    right: 0;
    background: linear-gradient(135deg, #6293c8, #384c6c);
    border-radius: 0 4px 0 32px;
  }
  
  .go-arrow {
    margin-top: -4px;
    margin-right: -4px;
    color: white;
    font-family: courier, sans;
  }
  
  .card {
    display: block;
    position: relative;
    max-width: 300px;
    max-height: 320px;
    background-color: #f2f8f9;
    border-radius: 10px;
    padding: 2em 1.2em;
    margin: 12px;
    text-decoration: none;
    z-index: 0;
    overflow: hidden;
    background: linear-gradient(to bottom, #c3e6ec, #a7d1d9);
    font-family: Arial, Helvetica, sans-serif;
  }
  
  .card:before {
    content: '';
    position: absolute;
    z-index: -1;
    top: -16px;
    right: -16px;
    background: linear-gradient(135deg, #364a60, #384c6c);
    height: 32px;
    width: 32px;
    border-radius: 32px;
    transform: scale(1);
    transform-origin: 50% 50%;
    transition: transform 0.35s ease-out;
  }
  
  .card:hover:before {
    transform: scale(28);
  }
  
  .card:hover .small-desc {
    transition: all 0.5s ease-out;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .card:hover .card-title {
    transition: all 0.5s ease-out;
    color: #ffffff;
  }

/* grid 

- if you click in the developer tool "grid" which will compare on the item you're using grid with
you'll be able to see the measures of your grid.*/

.container-grid {
    display: grid;
    grid-template-rows: 100px 100px 100px 100px 100px 100px;
    grid-template-columns: 100px 100px 100px 100px 100px 100px;
    background-color: #2196F3;
    padding: 10px;
    margin: 10px auto;
    width: 600px;
    
  }
  .item {
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 20px;
    font-size: 30px;
    text-align: center;
  }

  .item1 {
    grid-row: 1/3;
    grid-column:1/5;
  }

  .item2 {
    grid-row: span 2; /* the function of span is to */
    grid-column: span 2;
  }

  .item3{
    grid-area: 3 / 1 / -1 / -1; 
    /* grid-area allows you to select grid-row-start / grid-row-end / same for column... */
  }

  .container-grid2 {
    display: grid;
    grid-template-rows: repeat(2, 100px); /*you can change the number 2 with auto-fit that will
     auto adust the rows depending on the size of the screen. */
    grid-template-columns: 1fr 3fr 1fr; /* fr represents a fractional value of the available space*/
    grid-gap: 1em; /* first gap on the raw, second gap on the column*/
    grid-template-areas: /* with this property you can assign a name  to each grid, and call that
    name to a specific element so that the element takes that form*/
    'header header header'
    'center center center'
    'footer footer footer';
    ;
    background-color: #2196F3;
    padding: 10px;
    margin: 10px auto;
    width: 600px;
    
  }
  .item2 {
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 20px;
    font-size: 30px;
    text-align: center;
  }

  .item2-1{
    grid-area: header;
  }

  .item2-2{
    grid-area: center;
  }

  .item2-3{
    grid-area: footer;
  }
 
/* flexbox */

.body-container-flexbox{
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

.container-flexbox{
  background-color: #cacaca;
  padding: 10px;
  margin: 50px;
  display: flex;
  flex-direction: row;
  justify-content: center; /* justify content controls the y axis*/
  align-items: flex-end;  /* justify content controls the x axis*/
}

.item-f{
  background-color: red;
  color: white;
  font-size: 35px;
  padding: 20px;
  margin: 10px;
  
}

/* transition */

.transition-button{
  font-size: 2rem;
  font-weight: 700;
  padding: 0.5em 1em;
  color: red;
  background-color: rgb(197, 128, 128);
  border-radius: 5px;
  border: 10px solid red;

  /* transition-property: transform;     /*defines which property the transition effect should be applied to. */
  /* transition-duration: 0.3s;      /* defines how long should take the property to complete the transition */
  /* transition-timing-function: ease;       definies the accelation curve for the transition */
  /* transition-delay: 0s;      defines the delay before the transition should take effect  */ */
 
  transition: transform 0.3s; /* you can also write it in this way */
}

.transition-button:hover{
  transform: translateY(-10px);
  color: white;
  background-color: red;
}

/* Utility classes for animations */
.animate {
  animation-duration: 1s;
  animation-fill-mode: both;
}

.animate.animate--infinite {
  animation-iteration-count: infinite;
}

.animate.animate--delay-1s {
  animation-delay: 1s;
}

.animate.animate--fast {
  animation-duration: 0.6s;
}

.animate.animate--slow {
  animation-duration: 3s;
}

/* animation */

@keyframes slideinleft {
  from{
    transform: translateX(0px);
  }

  to{
    transform: translateX(300px);
  }
}

.slideInLeft{


  animation-name: slideinleft;
  animation-timing-function: ease-in;

  /*
  animation-name: slideinleft; /*select the keyframe you want to use */
  /* animation-duration: 2s; 
  /* this set the time need to complete 1 lap, this define how long it 
  will take from 0% to 100%, default is 0s.  */ 

  /* animation-timing-function: ease-in;
  animation-delay: 0s;
  animation-iteration-count: 1; /*this define how many times you want the animation to run, default is 1 */ 
  /* animation-direction: normal; /*this defines wheater the animation run normally or in reverse, default is normal*/
  /* animation-fill-mode: none; /*this defines what styles are applied before and after the animation, default is none
  this has also elemetents.*/
  
  /* transform: translateX(150px);

  /* you could also use the shorthand 'animation:' without writing every property.*/
}

@keyframes slideInRight {
  from {
    transform: translateX(300px);
  }

  to {
    transform: translateX(0);
  }
}

.slideInRight {
  animation-name: slideInRight;
  animation-timing-function: ease-in;
}

@keyframes rotate {
  from {
    transform: rotate(0);
  }

  to {
    transform: rotate(360deg);
  }
}

.rotate {
  animation-name: rotate;
  animation-timing-function: linear;

  transform-origin: top left;
}

@keyframes bounce {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }

  40% {
    transform: translateY(-30px);
  }

  60% {
    transform: translateY(-15px);
  }
}

.bounce {
  animation-name: bounce;
}